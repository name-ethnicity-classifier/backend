name: Test, build and release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main 

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pwd123
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_HOST: localhost
      FLASK_ENV: test
      FLASK_APP: src/app.py
      JWT_SECRET: supersecret
      JWT_EXPIRATION_DAYS: 30
      MINIO_USER: minio-user
      MINIO_PASSWORD: minio-password
      MINIO_HOST: http://127.0.0.1
      MINIO_PORT: 9000
      MINIO_UI_PORT: 9001
      MINIO_ACCESS_KEY_ID: minio-key-id
      MINIO_SECRET_ACCESS_KEY: minio-secret-key
      MODEL_S3_BUCKET: models
      BASE_DATA_S3_BUCKET: base-data
      BASE_MODEL: conv_lstm_v1
      MAX_NAMES: 10
      BATCH_SIZE: 30
      MAX_MODELS: 3
      DAILY_QUOTA: 100000
      RESEND_API_KEY: resend-secret
      USER_VERIFICATION_ACTIVE: False

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.10.13
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          pytest

  version-check:
    needs: test
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest

    outputs:
      bump_type: ${{ steps.check_version.outputs.bump_type }}
      new_version: ${{ steps.new_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get new version
        id: new_version
        run: echo ::set-output name=version::$(cat VERSION)

      - name: Get previous version
        id: previous_version
        run: echo ::set-output name=version::$(git describe --tags --abbrev=0 || echo '0.0.0')

      - name: Check version
        id: check_version
        run: |
          python .github/version_check.py ${{ steps.previous_version.outputs.version }} ${{ steps.new_version.outputs.version }}
          echo "${{ github.event_name}} ${{ github.ref }}"

  image-release:
    needs: version-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.version-check.outputs.bump_type != 'patch' && needs.version-check.outputs.bump_type != 'no-bump'
    runs-on: ubuntu-latest

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: name-ethnicity-classifier
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build and push backend image to GitHub Container Registry
        run: |
          IMAGE_VERSION=${{ needs.version-check.outputs.new_version }}
          IMAGE_NAME=ghcr.io/name-ethnicity-classifier/n2e-backend

          docker build -t $IMAGE_NAME:$IMAGE_VERSION -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:$IMAGE_VERSION
          docker push $IMAGE_NAME:latest

      - name: Build and push API documentation image to GitHub Container Registry
        run: |
          IMAGE_VERSION=${{ needs.version-check.outputs.new_version }}
          IMAGE_NAME=ghcr.io/name-ethnicity-classifier/n2e-api-docs

          docker build -t $IMAGE_NAME:$IMAGE_VERSION -t $IMAGE_NAME:latest ./api-documentation
          docker push $IMAGE_NAME:$IMAGE_VERSION
          docker push $IMAGE_NAME:latest

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-check.outputs.new_version }}
          release_name: ðŸŽ‰ N2E Backend ${{ needs.version-check.outputs.new_version }}
          draft: false
          prerelease: false
