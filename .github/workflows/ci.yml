name: Test, build and release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main 

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pwd123
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_HOST: localhost
      FLASK_ENV: test
      FLASK_APP: src/app.py
      JWT_SECRET: supersecret
      JWT_EXPIRATION_DAYS: 30
      MAX_NAMES: 10
      BATCH_SIZE: 30
      MAX_MODELS: 3

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.10.13
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          pytest

  version-check:
    needs: test
    if: github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    outputs:
      bump_type: ${{ steps.check_version.outputs.bump_type }}

    steps:
      - name: Get previous version
        id: previous_version
        run: echo ::set-output name=version::$(cat VERSION)

      - name: Get current version
        id: current_version
        run: echo ::set-output name=version::$(curl https://raw.githubusercontent.com/${{ github.repository }}/main/VERSION)

      - name: Check version
        id: check_version
        run: |
          python check_version.py ${{ steps.previous_version.outputs.version }} ${{ steps.current_version.outputs.version }}
    
  image-release:
    needs: version-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.version-check.outputs.bump_type != 'patch'
    runs-on: ubuntu-latest

    steps:
      - name: Get previous version
        id: previous_version
        run: echo ::set-output name=version::$(cat VERSION)

      - name: Get current version
        id: current_version
        run: echo ::set-output name=version::$(cat VERSION)

      - name: Check version
        run: |
          python check_version.py ${{ steps.previous_version.outputs.version }} ${{ steps.current_version.outputs.version }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: name-ethnicity-classifier
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create image from repository
        run: docker build -t ghcr.io/name-ethnicity-classifier/n2e-backend .

      - name: Push image to GitHub Container Registry
        run: docker push ghcr.io/name-ethnicity-classifier/n2e-backend

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          release_name: ðŸŽ‰ N2E Backend ${{ steps.current_version.outputs.version }}
          draft: false
          prerelease: false
        id: create_release
  
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
